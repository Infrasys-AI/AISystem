1
00:00:01,133 --> 00:00:04,166
字幕生成：mkwei    字幕校准：mkwei

2
00:00:05,700 --> 00:00:06,866
hello 大家好

3
00:00:07,200 --> 00:00:10,300
人人都说上班好不知上班催人老

4
00:00:11,800 --> 00:00:15,633
那今天呢我们来到了 AI 芯片的 NPU 详解

5
00:00:15,666 --> 00:00:17,666
里面的其中一小节啊

6
00:00:17,666 --> 00:00:19,966
这个顺序呢或者发布的顺序呢会有点乱

7
00:00:20,266 --> 00:00:21,300
最后会成型的

8
00:00:21,300 --> 00:00:24,033
今天我要给大家分享的就是

9
00:00:24,166 --> 00:00:28,600
特斯拉最新发布的 AI 芯片 DOJO 的整体架构

10
00:00:28,833 --> 00:00:31,966
我们看一下在整个 AI 专用处理器里面呢

11
00:00:32,066 --> 00:00:35,733
我们现在处于特斯拉 DOJO 这一个内容里面

12
00:00:35,733 --> 00:00:38,666
那这个内容呢其实我们分开很多个

13
00:00:38,666 --> 00:00:41,933
或者会分开两到三个内容去给大家汇报

14
00:00:41,933 --> 00:00:44,066
那第一个呢就是今天的内容

15
00:00:44,100 --> 00:00:45,633
DOJO 的整体架构

16
00:00:45,666 --> 00:00:47,666
还有 DOJO Core 的一个架构

17
00:00:47,666 --> 00:00:48,666
我们还是看架构

18
00:00:48,666 --> 00:00:50,633
看看 DOJO 到底是什么

19
00:00:50,666 --> 00:00:52,633
接着呢我们在第二个视频里面

20
00:00:52,666 --> 00:00:55,666
就会深入的去打开 DOJO 的前端的处理

21
00:00:55,700 --> 00:00:57,700
还是 DOJO Core 的执行引擎

22
00:00:57,700 --> 00:00:58,700
最后看看 DOJO Core

23
00:00:58,733 --> 00:01:02,666
里面的 SRAM 和内存是怎么实现的

24
00:01:02,666 --> 00:01:04,700
最后我们会看看内核和物理实现

25
00:01:04,733 --> 00:01:08,733
还有一些整个 DOJO 的系统到底是怎么起来

26
00:01:08,733 --> 00:01:10,700
还有一些问题与思考

27
00:01:10,700 --> 00:01:14,666
所以会分开三个内容给大家汇报

28
00:01:15,666 --> 00:01:17,666
现在呢我们来到了第一个内容

29
00:01:17,666 --> 00:01:20,600
DOJO 整体架构的介绍

30
00:01:20,866 --> 00:01:24,733
后面呢我们会给大家去播一个整个 DOJO 的视频

31
00:01:24,733 --> 00:01:27,666
然后让大家直观的去感受的

32
00:01:27,666 --> 00:01:29,633
首先呢特斯拉的这个 DOJO

33
00:01:29,666 --> 00:01:32,666
我们叫做超级计算机系统

34
00:01:32,666 --> 00:01:35,666
那右边这个呢就是 DOJO 组成的 ExaPOD

35
00:01:35,666 --> 00:01:37,733
专门用来做神经网络的加速

36
00:01:37,733 --> 00:01:38,733
我们可以看到

37
00:01:38,733 --> 00:01:40,666
从这个图就是整个 DOJO

38
00:01:40,700 --> 00:01:42,700
超级计算机系统的组成

39
00:01:42,733 --> 00:01:44,733
首先呢有个第一整体的 chip

40
00:01:44,733 --> 00:01:47,700
接着呢 chip 会封装成一个 Training Tile

41
00:01:47,733 --> 00:01:50,633
接着呢我们还会有 DIP

42
00:01:50,666 --> 00:01:52,700
DIP 呢作为一个 PCIe 插槽呢

43
00:01:52,733 --> 00:01:54,700
其实它还有 HBM

44
00:01:54,700 --> 00:01:57,633
那最后呢把这些都组合起来

45
00:01:57,666 --> 00:02:01,633
就变成我们整一个 SuperPod 或者叫做 ExaPod

46
00:02:01,666 --> 00:02:03,666
里面呢就有两台机器

47
00:02:03,666 --> 00:02:06,700
每一台机器呢又有六个 Training Tile

48
00:02:06,700 --> 00:02:08,733
那现在呢我们整体来打开看看

49
00:02:08,733 --> 00:02:12,633
整个 DOJO 超级计算机里面的每一个细节内容

50
00:02:12,666 --> 00:02:16,633
首先呢 DOJO 里面呢是有非常多的 DOJO Core

51
00:02:16,666 --> 00:02:18,633
就是我们的 DOJO 内核来组成

52
00:02:18,666 --> 00:02:21,733
右下角这个图呢就是 DOJO Core 的整体的架构

53
00:02:21,733 --> 00:02:24,733
它是具有自己独立的 CPU 专用的内存和 IO 的

54
00:02:24,733 --> 00:02:27,700
所以大家可以认为每一个 DOJO Core 呢

55
00:02:27,733 --> 00:02:30,700
可以作为一个小型非常微型的 PC

56
00:02:30,700 --> 00:02:35,666
而每一个内核呢又拥有 1.25MB 的一个 SRAM

57
00:02:35,666 --> 00:02:36,666
作为主存

58
00:02:36,700 --> 00:02:39,633
大家注意这里是主存而不是缓存

59
00:02:39,666 --> 00:02:41,633
里面还是有区别的，最后一点呢

60
00:02:41,733 --> 00:02:46,733
就是 SRAM 能够以 400GB 每秒的速度加载进来

61
00:02:46,733 --> 00:02:48,666
去给我们的 Scalar

62
00:02:48,700 --> 00:02:51,666
还有我们的 Vector 进行计算

63
00:02:51,666 --> 00:02:55,733
并且以 270GB 每秒的速度进行存储

64
00:02:55,733 --> 00:02:59,633
读写的速率变得非常的快

65
00:02:59,666 --> 00:03:02,666
那有了刚才简单的 DOJO Core 之后呢

66
00:03:02,666 --> 00:03:03,733
我们现在看看 D1

67
00:03:03,733 --> 00:03:06,700
那 D1 呢是有非常非常多的

68
00:03:06,700 --> 00:03:09,666
刚才介绍的 DOJO Core 去组成的

69
00:03:09,700 --> 00:03:13,666
这里面呢就采用了台积电 7NM 的制程工艺

70
00:03:13,666 --> 00:03:16,700
里面有 645 平方毫米的面积啊

71
00:03:16,733 --> 00:03:17,733
所以说它非常小啊

72
00:03:17,733 --> 00:03:21,666
就一个手指甲盖那么大小的面积里面

73
00:03:21,666 --> 00:03:24,666
上面呢就拥有了 500 亿个晶体管

74
00:03:24,700 --> 00:03:25,666
非常夸张

75
00:03:25,666 --> 00:03:28,733
而这里面的主打的计算的数据类型呢

76
00:03:28,733 --> 00:03:33,633
主要是 BF16 和 CFP8

77
00:03:33,666 --> 00:03:36,233
CFP8 我们会在后面介绍的，BF16 在给大家汇报

78
00:03:36,266 --> 00:03:38,633
A100 的时候已经给大家介绍过

79
00:03:38,666 --> 00:03:41,733
整体的算力呢可以高达 362TFLOPS

80
00:03:41,733 --> 00:03:43,666
那这个 362TFLOPS 呢

81
00:03:43,700 --> 00:03:45,666
其实跟英伟达 A100 差不多

82
00:03:45,666 --> 00:03:48,666
但是呢因为特斯拉的这款 DOJO 超级计算机呢

83
00:03:48,666 --> 00:03:50,633
主要是主打的存算一体

84
00:03:50,666 --> 00:03:53,700
所以他在 AI 的计算的效率会比英伟达要高很多

85
00:03:53,700 --> 00:03:57,666
另外的 FP32 的算力呢呃还是比较低的

86
00:03:57,666 --> 00:03:58,700
22.6TFLOPS

87
00:03:58,733 --> 00:04:01,733
整体的热设计功耗为 400 瓦了

88
00:04:01,733 --> 00:04:06,633
注意这里面呢为什么会专门的去提 TDP 呢

89
00:04:06,666 --> 00:04:07,633
是因为它的供电方式呢

90
00:04:07,666 --> 00:04:10,666
跟传统的供电方式是有点不一样的

91
00:04:10,700 --> 00:04:14,666
现在呢我们刚刚讲完一个 D1 的芯片呢

92
00:04:14,666 --> 00:04:17,633
也就是其中的一个模块而已

93
00:04:17,666 --> 00:04:19,666
基于 D1 芯片呢特斯拉

94
00:04:19,666 --> 00:04:21,733
就推出了整个晶圆系统的解决方案呢

95
00:04:21,733 --> 00:04:25,666
我们可以看到下面这块图是一整一块晶圆

96
00:04:25,700 --> 00:04:27,633
里面的每一个小方格呢

97
00:04:27,666 --> 00:04:30,666
就是我们刚才讲到的 D1 芯片啊

98
00:04:30,666 --> 00:04:33,633
D1 芯片里面呢又有 354 个

99
00:04:33,666 --> 00:04:35,733
刚才我们在讲到的 DOJO Core

100
00:04:35,733 --> 00:04:37,633
整体的应用

101
00:04:37,666 --> 00:04:40,700
还是采用了台积电的 SoW 的封装技术啊

102
00:04:40,700 --> 00:04:42,666
把整体封装成一个晶圆

103
00:04:42,700 --> 00:04:45,700
那这里面呢就有 25 颗 D1 的裸芯片呢

104
00:04:45,733 --> 00:04:50,700
横五个竖着五个组成了一个训练的 Tile

105
00:04:50,700 --> 00:04:52,733
每个 Tile 呢都需要独立的去供电

106
00:04:52,733 --> 00:04:54,666
所以我们可以看到了往下

107
00:04:54,700 --> 00:04:58,633
这面有一个模块呢就专门用来供电的模块

108
00:04:58,666 --> 00:04:59,666
整个 DOJO 的训练 Tile 呢

109
00:04:59,666 --> 00:05:00,666
有计算、I/O、功率

110
00:05:00,666 --> 00:05:02,633
还有液冷的模块

111
00:05:02,666 --> 00:05:04,666
就组成了一个 Training Tile

112
00:05:06,666 --> 00:05:07,633
组成一个 Training Tile 之后呢

113
00:05:07,666 --> 00:05:10,733
我们就会把所有的 Training Tile 再组成一款主机

114
00:05:10,733 --> 00:05:13,700
那这里面呢在 DOJO 的超级计算机系统呢

115
00:05:13,700 --> 00:05:15,666
我们往右边的这个图看看

116
00:05:15,700 --> 00:05:16,733
刚才讲到的 Training Tile 呢

117
00:05:16,733 --> 00:05:18,666
就是右边的这个图

118
00:05:18,700 --> 00:05:19,666
简单的这么一块

119
00:05:19,666 --> 00:05:21,633
作为一个 Training Tile

120
00:05:21,666 --> 00:05:23,700
整一款主机组成在一起的时候呢

121
00:05:23,700 --> 00:05:25,733
这里面就有非常多的电缆了

122
00:05:25,733 --> 00:05:26,633
大家可以看看

123
00:05:26,666 --> 00:05:29,633
这里面有非常多紫色的或者蓝色的电缆

124
00:05:29,666 --> 00:05:32,666
这里面呢是一个非常高速带宽的连接

125
00:05:32,666 --> 00:05:35,700
里面呢支持的 BF16/CFP8 的峰值

126
00:05:35,700 --> 00:05:38,666
算力达到 54TFLOPS

127
00:05:38,700 --> 00:05:41,700
整体的功耗呢其实也是非常非常的高

128
00:05:41,700 --> 00:05:44,700
因为他把刚才的好几块我们的 Training Tile

129
00:05:44,733 --> 00:05:47,666
组成起来变成一款机器

130
00:05:47,666 --> 00:05:49,633
接下来我们看一下整体的 DOJO 计算机

131
00:05:49,666 --> 00:05:49,733
计算机里面呢

132
00:05:49,733 --> 00:05:51,666
这里面有一块很有意思的

133
00:05:51,700 --> 00:05:53,700
就是看到标准的插槽呢

134
00:05:53,700 --> 00:05:55,633
就是我们的 PCIe 插槽

135
00:05:55,633 --> 00:05:57,466
这里面有两块芯片

136
00:05:57,733 --> 00:06:00,700
这两块芯片呢其实就是我们的 HBM

137
00:06:00,733 --> 00:06:02,700
于是呢这一块接口处理器呢

138
00:06:02,700 --> 00:06:05,733
我们叫做高带宽的内存 PCIe 卡

139
00:06:05,733 --> 00:06:07,633
所以里面有两个内容

140
00:06:07,666 --> 00:06:08,700
第一个呢是支持 PCIe

141
00:06:08,700 --> 00:06:10,700
第二个呢是支持高带宽的内存 HBM

142
00:06:10,700 --> 00:06:14,633
里面的传输协议呢是用特斯拉自己定制的

143
00:06:14,666 --> 00:06:15,633
TTP 啊

144
00:06:15,666 --> 00:06:18,666
也就是 Tesla Transport Protocol

145
00:06:18,666 --> 00:06:20,700
在特斯拉的主机和训练 Tile 之间呢

146
00:06:20,700 --> 00:06:24,733
就是通过右边的这一块 DIP 进行连接

147
00:06:24,733 --> 00:06:28,633
而整个 DIP 呢就有 32GB 的 HBM

148
00:06:28,666 --> 00:06:30,733
就是我们的高带宽的内存

149
00:06:30,733 --> 00:06:32,633
那往下看看呢

150
00:06:32,666 --> 00:06:33,633
我们看到啊

151
00:06:33,666 --> 00:06:35,733
其实刚才的高带宽内存都在下面

152
00:06:35,733 --> 00:06:39,633
然后呢在往上就是我们刚才讲到的 Training Tile

153
00:06:39,666 --> 00:06:42,633
整一个主机呢里面的 TTPOE

154
00:06:42,666 --> 00:06:44,733
就可以把标准的以太网转换成为

155
00:06:44,733 --> 00:06:47,633
我们的 Z 平面的拓扑

156
00:06:47,666 --> 00:06:49,733
Z 平面的拓扑呢就可以更好的对我们的 Training Tile

157
00:06:49,733 --> 00:06:51,700
进行一个数据的交换

158
00:06:51,733 --> 00:06:53,700
或者叫存算一体的工作

159
00:06:53,700 --> 00:06:54,666
再往下这个图呢

160
00:06:54,666 --> 00:06:56,633
我们看一下这里面有五块 DIP

161
00:06:56,666 --> 00:06:57,666
右边有五块 DIP

162
00:06:57,700 --> 00:06:59,733
所以我们最多可以将五个 DIP 呢

163
00:06:59,733 --> 00:07:01,733
以 900GB 每秒的速度呢

164
00:07:01,733 --> 00:07:04,633
连接到一个 Training Tile 上面

165
00:07:04,666 --> 00:07:07,666
所以呢整体的 Training Tile 的吞吐呢变得非常的高

166
00:07:07,666 --> 00:07:09,733
4.5T 每秒的数据的吞吐

167
00:07:09,733 --> 00:07:10,733
而每个 Training Tile 呢

168
00:07:10,733 --> 00:07:13,666
就拥有了 160GB 的 HBM

169
00:07:13,700 --> 00:07:15,733
因为每一个有三十二三十二乘以五

170
00:07:15,733 --> 00:07:18,633
就等于 160GB 的一个 HBM

171
00:07:18,666 --> 00:07:23,400
整体的主机组成呢就变成右边的这个图所示

172
00:07:23,666 --> 00:07:26,666
在后面呢就是整个 DOJO 的主机的接口

173
00:07:26,700 --> 00:07:30,633
这里面呢就拥有 512 个 X86 的内核

174
00:07:30,666 --> 00:07:32,666
还有 8TB 的主存

175
00:07:32,666 --> 00:07:34,633
8TB 的主存还是非常的高的

176
00:07:34,666 --> 00:07:37,733
整体的 PCIe 的带宽是 640GB 每秒

177
00:07:37,733 --> 00:07:40,700
卡间的带宽是非常非常的高

178
00:07:40,733 --> 00:07:45,700
最后呢把刚才的这一台 DOJO 的主机呢组装起来

179
00:07:45,733 --> 00:07:47,700
就变成了 DOJO 的 ExaPod

180
00:07:47,700 --> 00:07:49,666
每个 ExaPOD 就有两款

181
00:07:49,666 --> 00:07:51,666
刚才讲到的一个主机

182
00:07:51,700 --> 00:07:53,733
这么一款大的机柜呢

183
00:07:53,733 --> 00:07:56,666
我们叫做整个 ExaPOD 里面呢

184
00:07:56,666 --> 00:07:58,633
就集成 128 个 Training Tile

185
00:07:58,666 --> 00:08:00,733
内置呢就 3000 个 D1 的芯片

186
00:08:00,733 --> 00:08:03,700
拥有 100 万个训练的节点

187
00:08:03,733 --> 00:08:06,633
也就是我们刚才讲到的 DOJO Core

188
00:08:06,666 --> 00:08:10,666
BF16/CFP8 的峰值算力就达到了 1.1EFLOPS

189
00:08:10,666 --> 00:08:12,733
已经到了 E 级别了

190
00:08:12,733 --> 00:08:14,700
不是 T 级别这么夸张了

191
00:08:14,700 --> 00:08:18,700
总体呢拥有 1.3TB 的高速的 SRAM 和 13TB

192
00:08:18,700 --> 00:08:19,700
虽然它的整体的峰值算力

193
00:08:19,733 --> 00:08:24,666
和吞吐量呢就网络的吞吐是非常高的(嗝)

194
00:08:24,700 --> 00:08:26,733
现在呢我们从上往下看一下

195
00:08:26,733 --> 00:08:28,666
刚才讲到的一个内核

196
00:08:28,700 --> 00:08:31,633
那就是我们的 DOJO Core 里面偏上的 SRAM 呢

197
00:08:31,666 --> 00:08:33,666
就有 1.25MB

198
00:08:33,666 --> 00:08:34,733
整体的算计呢并不大

199
00:08:34,733 --> 00:08:36,666
只有 1.024TFLOPS

200
00:08:36,700 --> 00:08:38,666
但是呢这整一个 DOJO Core 呢

201
00:08:38,666 --> 00:08:40,666
它可以作为单独的一个 PC

202
00:08:40,700 --> 00:08:43,700
里面就用了四个 8×8×4 矩阵乘的计算的核心

203
00:08:43,733 --> 00:08:45,633
另外的话 354 的 DOJO Core 呢

204
00:08:45,666 --> 00:08:48,666
就会组成一个 DOJO 的 D1 啊

205
00:08:48,666 --> 00:08:51,666
DOJO 的 D1 简单的一小块芯片里面的片上 SRAM

206
00:08:51,700 --> 00:08:53,633
有 440MB

207
00:08:53,666 --> 00:08:55,733
整体的算力是 362TFLOPS

208
00:08:55,733 --> 00:08:59,666
另外的话六块 DOJO D1 呢就组成了一个 DOJO Tile

209
00:08:59,700 --> 00:09:01,666
或者我们叫做 Training Tile

210
00:09:01,666 --> 00:09:03,733
里面就这么一块组合的芯片

211
00:09:03,733 --> 00:09:06,633
总体的片上 SRAM 有 11GB

212
00:09:06,666 --> 00:09:09,666
然后算力的是 9050TFLOPS 呢

213
00:09:09,700 --> 00:09:11,700
这里面呢就接近万 TFLOPS 呢

214
00:09:11,733 --> 00:09:14,700
每 5×5 个 D1 组成这么一块

215
00:09:14,700 --> 00:09:18,633
每六块 DOJO Tile 或 Training Tile 就组成一款主机啊

216
00:09:18,666 --> 00:09:21,633
每一台机柜呢就有两台主机

217
00:09:21,666 --> 00:09:22,700
整体来说呢

218
00:09:22,700 --> 00:09:26,666
ExaPOD 呢就提供了 1320GB 的片上 SRAM

219
00:09:26,733 --> 00:09:29,633
而且峰值算力的非常非常的夸张

220
00:09:29,666 --> 00:09:31,633
到达了 1.1EFLOPS

221
00:09:31,666 --> 00:09:35,666
里面呢就拥有了 3000 个 D1 的芯片

222
00:09:35,666 --> 00:09:37,666
接下来我们会看一个简单的视频

223
00:09:37,733 --> 00:09:39,633
看一下 DOJO 整个超级计算机系统里面呢

224
00:09:39,666 --> 00:09:43,633
这几个模块是怎么组合起来的

225
00:09:43,666 --> 00:09:47,700
This is a groundbreaking integration of twenty five

226
00:09:47,700 --> 00:09:48,700
Known god

227
00:09:48,700 --> 00:09:52,666
One dies onto a fair and out way for process

228
00:09:52,666 --> 00:09:53,700
Tightly integrated

229
00:09:53,733 --> 00:09:54,733
Such that it preserves

230
00:09:54,733 --> 00:09:56,633
The bandwidth between them

231
00:09:56,666 --> 00:09:58,666
The maximum banddis preserved there

232
00:09:58,666 --> 00:09:59,700
And in addition

233
00:09:59,733 --> 00:10:03,733
We generated a connector

234
00:10:03,733 --> 00:10:05,666
A high bandwidth

235
00:10:05,700 --> 00:10:08,633
High density connector that preserves

236
00:10:08,666 --> 00:10:10,733
The bandwidth coming out of the straining tile

237
00:10:10,733 --> 00:10:14,733
We created a custom voltage

238
00:10:14,733 --> 00:10:18,633
Regulator module that could be reflowed

239
00:10:18,666 --> 00:10:19,633
Directly

240
00:10:19,666 --> 00:10:21,700
Directly onto the spout baer

241
00:10:21,700 --> 00:10:24,666
So what did we did out here is

242
00:10:24,666 --> 00:10:26,666
We got chips and already out here

243
00:10:26,666 --> 00:10:31,433
Didn't stop here be integrated the entire electrical

244
00:10:31,733 --> 00:10:39,700
Thermal and mechanical pieces out here to form our training tile

245
00:10:39,700 --> 00:10:40,700
Fully integrated

246
00:10:42,700 --> 00:10:44,666
With a fifty two or dc

247
00:10:47,666 --> 00:10:49,700
现在我们可以看到 DOJO 的设计师

248
00:10:49,733 --> 00:10:51,633
惊喜又

249
00:10:51,666 --> 00:10:54,666
略带点猥琐的拿出了我们的 DOJO Tile

250
00:10:54,666 --> 00:10:56,633
训练的芯片

251
00:10:58,666 --> 00:10:59,666
接着爆了一句

252
00:10:59,700 --> 00:11:00,666
I can't believe it

253
00:11:00,666 --> 00:11:04,666
然后尴尬的把这块芯片又放回去了

254
00:11:05,666 --> 00:11:08,633
Now we can put two of these assemblies into one

255
00:11:08,666 --> 00:11:11,666
Cabinet and parrot with redundant

256
00:11:11,666 --> 00:11:14,733
Power supplies that do direct conversion of three phase

257
00:11:14,733 --> 00:11:15,666
Four eighty

258
00:11:15,700 --> 00:11:20,733
Viai power to fight fifty two volt dc power

259
00:11:22,733 --> 00:11:26,633
Now by focusing on density at every level

260
00:11:26,666 --> 00:11:30,700
We can realize the vision of a single accelerated

261
00:11:30,733 --> 00:11:34,700
Now starting with the uniform nodes on our custom d one die

262
00:11:34,733 --> 00:11:36,733
We can connect them together in our

263
00:11:36,733 --> 00:11:38,700
Fully integrated training tiles

264
00:11:39,733 --> 00:11:43,633
And then finally seamlessly connecting them

265
00:11:43,666 --> 00:11:47,700
Across cabinet boundaries to form ardojo accelerator

266
00:11:47,700 --> 00:11:48,733
And altogether

267
00:11:48,733 --> 00:11:53,633
We can house two full accelerators in our exit top

268
00:11:53,666 --> 00:11:56,700
下面我们看一下整个 DOJO 设计架构的哲学

269
00:11:56,700 --> 00:11:59,633
首先呢 DOJO 采用的是一个存算一体的架构

270
00:11:59,666 --> 00:12:02,700
也是把我们的存储和计算其实放在一起的

271
00:12:02,700 --> 00:12:05,733
我们也叫做近存计算或者存内计算了

272
00:12:05,733 --> 00:12:08,633
里面呢就统一了高带宽低延迟

273
00:12:08,666 --> 00:12:10,733
在整体的设计的理念里面就有三个重要的点

274
00:12:10,733 --> 00:12:12,700
第一个就是关于我们的芯片的面积

275
00:12:12,733 --> 00:12:14,733
第二个呢就是我们的网络的延迟

276
00:12:14,733 --> 00:12:17,666
第三个呢我们会对或者 DOJO 里面呢

277
00:12:17,700 --> 00:12:20,633
会对很多功能进行进一步的精简

278
00:12:20,666 --> 00:12:21,700
让我们逐个的去打开

279
00:12:21,700 --> 00:12:24,700
首先第一个呢就是我们的啊芯片面积的精简

280
00:12:24,733 --> 00:12:26,666
芯片面积精简说白了很简单

281
00:12:26,666 --> 00:12:27,633
就把大量的计算的核心

282
00:12:27,666 --> 00:12:29,700
全都集成在我们在芯片里面

283
00:12:29,733 --> 00:12:33,666
最大程度的提升整个 AI 计算的吞吐

284
00:12:33,666 --> 00:12:37,633
说白了就是为了使得我们的计算量更大

285
00:12:37,666 --> 00:12:40,733
里面就会塞非常非常多的 AI 的计算的核心

286
00:12:40,733 --> 00:12:43,633
第二个呢就是单芯片里面的延迟的精简

287
00:12:43,666 --> 00:12:45,733
为了使得我们整个计算的效率最大化呢

288
00:12:45,733 --> 00:12:46,700
除了面积的精简

289
00:12:46,733 --> 00:12:49,633
里面的内核呢会以 2GHz 里面去运行

290
00:12:49,666 --> 00:12:51,700
只保留了基本的分支预测

291
00:12:51,733 --> 00:12:53,666
还有小指令的缓存

292
00:12:53,666 --> 00:12:55,666
去掉了很多对 AI 计算没有必要的

293
00:12:55,700 --> 00:12:56,666
一些部件的架构

294
00:12:56,666 --> 00:12:58,666
把其余所有的面积全都留给我们的

295
00:12:58,700 --> 00:13:00,633
向量化的张量进行计算

296
00:13:00,666 --> 00:13:02,733
那第三个呢就是功能的精简

297
00:13:02,733 --> 00:13:04,733
除了去掉一些不必要的硬件以外呢

298
00:13:04,733 --> 00:13:08,633
其实这里面呢还是做了非常多的工作

299
00:13:08,666 --> 00:13:09,700
不支持数据端的缓存

300
00:13:09,733 --> 00:13:10,733
不支持虚拟的内存

301
00:13:10,733 --> 00:13:13,200
也不支持精确异常

302
00:13:13,233 --> 00:13:17,633
所有的东西都是为了提升我们 AI 的计算的吞吐

303
00:13:17,666 --> 00:13:19,700
这个就是 DOJO 的整体的设计架构

304
00:13:19,700 --> 00:13:22,700
所以我们可以看到 DOJO 的 D1 呢

305
00:13:22,733 --> 00:13:26,700
里面的计算单元是非常非常的密集

306
00:13:26,700 --> 00:13:29,733
每个小正方形的都是密密麻麻的计算单元

307
00:13:29,733 --> 00:13:31,666
最后呢我们对比一下

308
00:13:31,700 --> 00:13:34,633
DOJO D1 和同期出现的 A100 啊

309
00:13:34,666 --> 00:13:35,700
可能 A100 会稍微再早

310
00:13:35,700 --> 00:13:36,666
那么一年

311
00:13:36,700 --> 00:13:40,666
整体的片上 SRAM DOJO 里面是多了接近十倍的

312
00:13:40,666 --> 00:13:42,633
而算力呢其实差别不大

313
00:13:42,666 --> 00:13:43,700
我觉得 362TFLOPS

314
00:13:43,700 --> 00:13:45,700
还有 A100 的 312TFLOPS

315
00:13:45,700 --> 00:13:46,633
其实差别不大

316
00:13:46,666 --> 00:13:48,733
里面呢主要是指 FP16 或者 BF16

317
00:13:48,733 --> 00:13:50,666
这种格式的算力

318
00:13:50,666 --> 00:13:52,633
另外的话从计算核心来看呢

319
00:13:52,666 --> 00:13:54,666
A100 里面有 128 个 SM

320
00:13:54,666 --> 00:13:58,700
那整体 DOJO D1 里面有有 354 个 DOJO Core

321
00:13:58,700 --> 00:14:00,666
那可能这么算的不是很合理

322
00:14:00,700 --> 00:14:02,666
因为 A100 里面的 128 个 SM

323
00:14:02,700 --> 00:14:05,666
每个 SM 里面又有 4 个 tensor core

324
00:14:05,666 --> 00:14:07,700
所以总体来说呢 128×4 跟 350

325
00:14:07,733 --> 00:14:09,633
其实是差别不大

326
00:14:09,666 --> 00:14:10,733
反而 A100 会更占优势

327
00:14:10,733 --> 00:14:14,666
但是呢因为 DOJO 采用的是一个存算一体的架构

328
00:14:14,700 --> 00:14:18,733
所以它整体的吞吐呢会比 A100 要高很多

