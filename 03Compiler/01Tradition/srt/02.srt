1
00:00:00,000 --> 00:00:04,560
[字幕生成：BLACK 字幕校对：志宇]

2
00:00:05,160 --> 00:00:06,840
嗨大家好我是 ZOMI

3
00:00:06,840 --> 00:00:09,000
最近忙的实在有点焦头烂额

4
00:00:09,000 --> 00:00:11,480
所以更新的频率变慢了

5
00:00:11,480 --> 00:00:15,000
今天来到 AI 编译器的第二节

6
00:00:15,000 --> 00:00:17,280
主要是讲讲编译器的发展

7
00:00:17,960 --> 00:00:20,000
今天的内容比较轻松愉快

8
00:00:20,000 --> 00:00:22,560
主要是为下面两节课进行铺垫的

9
00:00:22,560 --> 00:00:25,280
而下面两节课也会稍微有点硬核

10
00:00:25,280 --> 00:00:27,680
所以今天就来点轻松点的内容

11
00:00:27,680 --> 00:00:29,520
The History of the Compiler

12
00:00:29,560 --> 00:00:30,680
编译器的发展

13
00:00:31,440 --> 00:00:33,080
其实今天的标题

14
00:00:33,480 --> 00:00:35,680
我是想改成两大开源编译器的

15
00:00:35,680 --> 00:00:37,000
相爱与相杀

16
00:00:37,000 --> 00:00:40,400
或者两大开源编译器的恩怨情仇

17
00:00:40,400 --> 00:00:43,040
不过这两个标题都有点哗然取众

18
00:00:43,040 --> 00:00:44,520
所以我就改成

19
00:00:45,360 --> 00:00:46,720
编译器的发展

20
00:00:46,720 --> 00:00:48,120
这个比较文艺的名字

21
00:00:48,120 --> 00:00:50,640
或者比较研发的一个名字了

22
00:00:50,920 --> 00:00:52,360
绝对不可能

23
00:00:52,360 --> 00:00:54,880
下面来回顾一下上一节的内容

24
00:00:54,880 --> 00:00:56,160
什么是编译器

25
00:00:56,160 --> 00:00:57,640
可以看到下面的图

26
00:00:58,000 --> 00:01:01,720
首先编译器就是实现了一些高级的语言

27
00:01:01,720 --> 00:01:02,840
通过这些高级语言

28
00:01:02,840 --> 00:01:04,600
机器是没办法去识别

29
00:01:04,600 --> 00:01:05,920
也没办法去跑的

30
00:01:05,920 --> 00:01:08,280
这是给人去看的

31
00:01:08,440 --> 00:01:10,400
现在有一个黑盒子

32
00:01:10,400 --> 00:01:12,360
这个黑盒子叫做编译器

33
00:01:12,360 --> 00:01:13,680
那编译器这个程序

34
00:01:14,040 --> 00:01:15,520
把刚才写的

35
00:01:15,520 --> 00:01:18,000
或者人读的一些高级语言

36
00:01:18,000 --> 00:01:19,480
作为输入输进去

37
00:01:19,480 --> 00:01:24,560
接着它输出是一堆 0101 的一些二进字码

38
00:01:25,000 --> 00:01:26,640
右边的这些二进字码

39
00:01:26,800 --> 00:01:28,480
才是真正被硬件

40
00:01:28,480 --> 00:01:29,400
被计算机

41
00:01:29,400 --> 00:01:32,000
被不同的芯片所识别

42
00:01:32,000 --> 00:01:34,880
所运行的真正去执行的程序

43
00:01:35,240 --> 00:01:38,080
所以说编译器非常重要

44
00:01:38,080 --> 00:01:42,360
它是连接人类跟机器的一个重要的桥梁

45
00:01:43,360 --> 00:01:46,280
下面来看看一个编译器的组成

46
00:01:46,280 --> 00:01:48,160
首先像刚才所说的

47
00:01:48,160 --> 00:01:49,480
把一些 source code

48
00:01:49,480 --> 00:01:52,280
就是高级语言输进去编译器

49
00:01:52,280 --> 00:01:55,880
编译器吐出一些可执行的二进字码

50
00:01:56,000 --> 00:01:57,400
中间的编译器

51
00:01:57,400 --> 00:01:59,320
实际在程序里面

52
00:01:59,320 --> 00:02:01,640
或者在开发阶段分成三段

53
00:02:01,640 --> 00:02:03,440
第一段是前端

54
00:02:03,440 --> 00:02:05,560
第二段是优化的阶段

55
00:02:05,560 --> 00:02:08,200
第三段叫做 backend 后端

56
00:02:08,880 --> 00:02:10,040
下面来看看

57
00:02:10,040 --> 00:02:12,760
编译器里面的每一段都有哪些作用

58
00:02:12,760 --> 00:02:14,840
首先第一段就是前端

59
00:02:14,840 --> 00:02:16,920
主要是负责对语言程序

60
00:02:16,920 --> 00:02:18,240
进行一些转化

61
00:02:18,240 --> 00:02:19,480
做一些词法分析

62
00:02:19,480 --> 00:02:20,200
语法分析

63
00:02:20,200 --> 00:02:22,560
把它变成一个抽象的语法树

64
00:02:22,800 --> 00:02:25,040
这时候不需要知道语法树是什么

65
00:02:25,080 --> 00:02:27,440
后面会简单的去给大家讲讲

66
00:02:27,440 --> 00:02:29,320
什么叫做语法树

67
00:02:29,680 --> 00:02:31,400
接着在优化器阶段

68
00:02:31,560 --> 00:02:33,040
就是中间的阶段

69
00:02:33,160 --> 00:02:35,000
会基于前端的基础之上

70
00:02:35,320 --> 00:02:36,200
在上一节里面

71
00:02:36,320 --> 00:02:37,880
叫做 IR 进行优化

72
00:02:37,880 --> 00:02:40,040
使得代码更加高效

73
00:02:40,240 --> 00:02:42,680
这个高效主要是指执行起来的

74
00:02:42,680 --> 00:02:44,240
更加高效和简洁

75
00:02:44,880 --> 00:02:47,760
在后端就是将刚才已经优化

76
00:02:47,760 --> 00:02:49,440
得到的一些中间代码

77
00:02:49,440 --> 00:02:50,920
或者中间表达 IR

78
00:02:50,920 --> 00:02:53,680
转换成为针对各自平台的一些机器码

79
00:02:54,200 --> 00:02:56,400
可能 x86 它有一种独特的方式

80
00:02:56,800 --> 00:02:58,520
ARM 里面又有独特的方式

81
00:02:59,000 --> 00:03:00,360
在 GPU 上面去执行

82
00:03:00,360 --> 00:03:01,880
它又有独特的机器码

83
00:03:01,880 --> 00:03:03,520
每种机器码都是不一样的

84
00:03:03,520 --> 00:03:06,040
所以后端会对接到不同的硬件上面

85
00:03:07,120 --> 00:03:08,640
下面来真正的进入

86
00:03:08,640 --> 00:03:10,320
相爱相杀系列

87
00:03:10,720 --> 00:03:14,640
去讲讲 GCC 和 LLVM 之间的爱恨情仇

88
00:03:14,640 --> 00:03:16,480
和它们之间的发展方向

89
00:03:17,680 --> 00:03:20,920
GCC 其实已经是上个世纪的一个产物了

90
00:03:20,920 --> 00:03:23,400
比我的年龄还要早那么几年

91
00:03:24,120 --> 00:03:25,640
在 1987 年的时候

92
00:03:25,640 --> 00:03:29,240
Virtual Store Man 就发布了 GCC 的第一个版本

93
00:03:29,240 --> 00:03:32,120
第一个版本不是 0.1 而是 1.0

94
00:03:32,760 --> 00:03:37,160
1.0 的 GCC 主要是作为 GNU 的一个 C 语言的变异器

95
00:03:37,920 --> 00:03:39,000
那个时候刚发明

96
00:03:39,000 --> 00:03:40,880
其实只能够处理 C 语言

97
00:03:44,360 --> 00:03:46,320
它已经支持了非常多的语言

98
00:03:46,640 --> 00:03:49,360
有 C++ Fortune Pascal Object C

99
00:03:49,360 --> 00:03:51,720
还有 Java 等非常丰富的语言

100
00:03:52,200 --> 00:03:53,760
讲完它能做啥

101
00:03:53,760 --> 00:03:55,640
下面来看看它具体的故事

102
00:03:55,640 --> 00:03:56,560
具体的故事

103
00:03:56,560 --> 00:03:58,360
其实我在 Wiki 百科里面

104
00:03:58,360 --> 00:04:00,000
做了一个简单的摘录

105
00:04:00,000 --> 00:04:01,600
上面那段话没什么好看的

106
00:04:01,600 --> 00:04:03,840
来看看下面的图

107
00:04:03,840 --> 00:04:05,880
图上面这个胡子拉碴的兄弟

108
00:04:05,880 --> 00:04:07,440
叫做 Virtual Store Man

109
00:04:07,960 --> 00:04:11,040
他在 1987 年的时候 GNU

110
00:04:11,040 --> 00:04:12,880
那 GNU 又是个什么鬼呢

111
00:04:13,280 --> 00:04:14,160
GNU 的名字

112
00:04:14,360 --> 00:04:16,360
又可以调侃成另外一个故事

113
00:04:16,360 --> 00:04:18,480
不过这里面不再展开

114
00:04:18,840 --> 00:04:20,400
GNU 它不是一个 NUNIX

115
00:04:20,520 --> 00:04:21,880
虽然 Linux 这个单词

116
00:04:22,080 --> 00:04:23,720
对大家来说不陌生

117
00:04:23,720 --> 00:04:25,600
大部分时候用的开源系统

118
00:04:25,600 --> 00:04:26,640
叫做 Linux

119
00:04:27,000 --> 00:04:28,360
GNU is not Linux

120
00:04:28,360 --> 00:04:30,280
就是指 Linux 一系列

121
00:04:30,280 --> 00:04:32,200
一类型的开源操作系统

122
00:04:32,960 --> 00:04:35,240
IMS 就基于开源操作系统

123
00:04:35,480 --> 00:04:37,280
去发明了一套编译器

124
00:04:37,400 --> 00:04:40,040
这套编译器就是基于 GNU 去开发的

125
00:04:40,040 --> 00:04:42,480
当时候开发只支持 C 语言编译器

126
00:04:43,160 --> 00:04:44,640
为什么要讲这个故事呢

127
00:04:44,960 --> 00:04:48,320
在 80 年代美国非常支持一种

128
00:04:48,360 --> 00:04:50,560
或者非常流行一种 Hippies 的文化

129
00:04:50,560 --> 00:04:52,120
也就是嬉皮士

130
00:04:52,120 --> 00:04:53,320
那时候的嬉皮士

131
00:04:53,440 --> 00:04:55,280
讲究的就是自由散漫

132
00:04:55,280 --> 00:04:58,600
所以这个思潮已经波及到软件界了

133
00:04:58,600 --> 00:05:00,400
左边这个胡子拉搭的兄弟

134
00:05:00,640 --> 00:05:03,880
其实看着有点不修边幅

135
00:05:03,880 --> 00:05:06,760
实际上它是非常推崇一种

136
00:05:06,760 --> 00:05:10,160
自由博爱民主的思潮

137
00:05:10,840 --> 00:05:12,120
基于这个思潮之下

138
00:05:12,120 --> 00:05:14,560
它就孕育出了一个非常自由博爱

139
00:05:14,560 --> 00:05:16,560
支持开源的 GCC 的编译器

140
00:05:16,880 --> 00:05:20,640
在 GCC 之上又雇住了非常多的开源软件

141
00:05:21,520 --> 00:05:24,760
谈到开源软件的另外一个对立面就是 Apple

142
00:05:25,360 --> 00:05:26,800
谈到 Apple 的一个印象

143
00:05:26,800 --> 00:05:28,640
就是它的生态很开放

144
00:05:28,640 --> 00:05:31,880
但是它的操作系统和内核非常的封闭

145
00:05:32,520 --> 00:05:34,840
其实在 80 年代 90 年代的时候

146
00:05:35,160 --> 00:05:36,800
苹果没有那么多钱

147
00:05:36,800 --> 00:05:38,400
或者它没有那么多大的心思

148
00:05:38,400 --> 00:05:40,320
去改为一个自己的编译器

149
00:05:40,320 --> 00:05:42,520
那时候的苹果想蹭就蹭

150
00:05:42,520 --> 00:05:43,880
能蹭多少蹭多少

151
00:05:43,880 --> 00:05:44,920
我绝不吝啬

152
00:05:47,240 --> 00:05:48,040
安排

153
00:05:48,720 --> 00:05:50,360
虽然现在去苹果店

154
00:05:50,600 --> 00:05:53,160
发现苹果店里面白白的桌子上面

155
00:05:53,160 --> 00:05:54,680
其实就放了几台 iPhone

156
00:05:54,960 --> 00:05:58,080
但实际上苹果它有非常多自己的一个系列

157
00:05:58,360 --> 00:05:59,520
在 1998 年的时候

158
00:05:59,520 --> 00:06:01,600
它已经推出了自己的个人笔记本

159
00:06:01,600 --> 00:06:02,760
然后还有 iPod

160
00:06:03,120 --> 00:06:04,120
MacBook 的笔记本

161
00:06:04,120 --> 00:06:06,840
还有 iPhone 系列的软硬件非常多

162
00:06:06,840 --> 00:06:07,920
而这里面看到

163
00:06:07,920 --> 00:06:10,000
它的操作系统也是非常复杂的

164
00:06:10,000 --> 00:06:11,280
从 macOS iOS

165
00:06:11,280 --> 00:06:13,040
WatchOS 到 tvOS

166
00:06:13,400 --> 00:06:15,320
在语言方面同时支持 C

167
00:06:15,360 --> 00:06:16,000
C++

168
00:06:16,000 --> 00:06:16,720
Optus C

169
00:06:16,720 --> 00:06:17,520
Swift

170
00:06:17,520 --> 00:06:18,520
而 CPU 方面

171
00:06:18,520 --> 00:06:21,360
一开始从 IBM 合作推出了 PowerPC

172
00:06:21,360 --> 00:06:23,120
然后引进了 x86

173
00:06:23,120 --> 00:06:24,440
在最近的这几代

174
00:06:24,680 --> 00:06:26,800
基于 ARM 的 v6 v7 v8 架构

175
00:06:26,800 --> 00:06:29,120
开发了属于苹果自己的芯片

176
00:06:29,120 --> 00:06:30,640
苹果这时候就看到了

177
00:06:30,640 --> 00:06:31,920
我有这么多语言

178
00:06:31,920 --> 00:06:33,680
我还有这么多的硬件

179
00:06:33,680 --> 00:06:36,320
中间是不是应该来一个厉害点的编译器

180
00:06:36,760 --> 00:06:39,320
苹果本身能蹭就蹭的一个原则

181
00:06:39,320 --> 00:06:43,400
采用了一个免费的开源的编译器 GCC

182
00:06:43,520 --> 00:06:45,640
苹果使用了 GCC 编译器之后

183
00:06:45,840 --> 00:06:47,560
不是基于开源之上的

184
00:06:47,560 --> 00:06:49,280
而是要进行一些定制的

185
00:06:49,280 --> 00:06:50,880
例如 Optus C 这些语言

186
00:06:50,880 --> 00:06:53,440
而且有自己的一些独特的需求

187
00:06:53,440 --> 00:06:54,960
还有商业上的决策

188
00:06:55,200 --> 00:06:55,760
这个时候

189
00:06:55,880 --> 00:06:58,200
从 GCC 的开源代码仓里面

190
00:06:58,200 --> 00:07:00,120
可能某段时间去合进去

191
00:07:00,120 --> 00:07:00,840
某段时间

192
00:07:00,840 --> 00:07:02,600
想把一些重要的特性

193
00:07:02,600 --> 00:07:03,960
合回开源仓

194
00:07:03,960 --> 00:07:06,400
有时候希望从开源的代码里面

195
00:07:06,400 --> 00:07:08,640
又获取一些新的特性到里面

196
00:07:08,640 --> 00:07:10,200
使用了一段时间之后

197
00:07:10,200 --> 00:07:10,960
苹果发现

198
00:07:10,960 --> 00:07:13,280
怎么我的版本管理越来越乱

199
00:07:13,560 --> 00:07:15,040
o(╥﹏╥)o 你的世界里

200
00:07:15,040 --> 00:07:16,240
没有我了

201
00:07:19,240 --> 00:07:20,560
而且到了后来

202
00:07:20,560 --> 00:07:23,160
发现 GCC 的包袱实在太重了

203
00:07:23,600 --> 00:07:24,880
与其使用 GCC

204
00:07:24,880 --> 00:07:26,760
我还不如自己造一个

205
00:07:27,440 --> 00:07:28,120
于是呢

206
00:07:28,120 --> 00:07:29,360
在 2000 年左右

207
00:07:29,360 --> 00:07:31,160
苹果引用了一位大牛

208
00:07:31,160 --> 00:07:32,880
叫做 Chris Lutter

209
00:07:34,080 --> 00:07:36,600
我不知道我这个名字读了对了没对

210
00:07:37,280 --> 00:07:38,320
如果我读错了

211
00:07:38,320 --> 00:07:40,120
欢迎大家弹幕来投诉

212
00:07:41,080 --> 00:07:42,440
别看 Chris 这么帅

213
00:07:42,480 --> 00:07:44,640
其实他是一个学霸

214
00:07:45,520 --> 00:07:46,840
在他本科毕业的时候

215
00:07:46,840 --> 00:07:50,720
他已经把 Compliance Principle Technology and Toast

216
00:07:50,720 --> 00:07:53,680
这版编译器的圣书已经翻烂了

217
00:07:53,680 --> 00:07:54,280
翻烂之后

218
00:07:54,280 --> 00:07:57,080
他觉得现在的编译器实在写的太烂了

219
00:07:57,520 --> 00:07:57,960
于是呢

220
00:07:57,960 --> 00:08:01,200
他发表了一篇又一篇关于编译器的论文

221
00:08:01,200 --> 00:08:04,760
在他硕士期间就提出了编译、链接、运行

222
00:08:04,760 --> 00:08:06,320
甚至闲时的优化

223
00:08:06,320 --> 00:08:08,640
整一套成体系的编译的思想

224
00:08:08,640 --> 00:08:09,800
在他读博的时候呢

225
00:08:09,800 --> 00:08:12,240
还跟着导师做了一个小程序

226
00:08:12,240 --> 00:08:15,360
这个小程序就是 LLVM 的雏形

227
00:08:15,360 --> 00:08:17,040
等他 05 年毕业的时候呢

228
00:08:17,040 --> 00:08:19,640
已经是编译器领域的一位专家了

229
00:08:20,200 --> 00:08:22,160
一毕业马上就进了 Apple

230
00:08:22,160 --> 00:08:23,800
就开始大展身手

231
00:08:23,800 --> 00:08:27,400
首先第一个大展身手的地方就是 OpenGL

232
00:08:27,400 --> 00:08:32,320
OpenGL 也是苹果主推的一个图形图像处理的语言

233
00:08:32,320 --> 00:08:33,200
一开始的时候

234
00:08:33,200 --> 00:08:35,120
苹果并没有平息到 GCC

235
00:08:35,120 --> 00:08:37,080
而直接使用 LLVM

236
00:08:37,080 --> 00:08:40,640
而是把 GCC 作为高级语言的前端

237
00:08:40,680 --> 00:08:43,080
把 LLVM 作为编译器的后端

238
00:08:43,080 --> 00:08:44,800
通过 LLVM 的编译器

239
00:08:44,800 --> 00:08:47,680
能够对接到苹果的不同的硬件上面

240
00:08:47,680 --> 00:08:48,640
在十几年前

241
00:08:48,640 --> 00:08:49,840
2011 年的时候

242
00:08:49,840 --> 00:08:52,800
GCC 占比其实还比 LLVM 要高

243
00:08:52,800 --> 00:08:54,600
但是到了后来

244
00:08:54,600 --> 00:08:56,360
LLVM 逐渐的成熟

245
00:08:56,360 --> 00:08:58,360
GCC 的占比越来越低

246
00:08:58,360 --> 00:09:01,560
而 LLVM 也不是一个苹果专属的软件

247
00:09:01,560 --> 00:09:04,880
而是作为开源界一个非常重要的软件

248
00:09:04,880 --> 00:09:07,080
开源开放给大家

249
00:09:07,080 --> 00:09:09,080
前端也不再使用 GCC

250
00:09:09,080 --> 00:09:10,760
而是使用 Kling

251
00:09:10,760 --> 00:09:14,520
所以在苹果编译 C 或者 C++代码的时候

252
00:09:14,520 --> 00:09:15,720
会经常使用 Kling

253
00:09:23,960 --> 00:09:26,840
讲完两代开源编译器的相爱和相杀

254
00:09:26,840 --> 00:09:28,880
你以为到这就结束了吗

255
00:09:28,880 --> 00:09:30,120
并没有

256
00:09:33,480 --> 00:09:36,840
GCC 编译器主要是基于 GNU

257
00:09:36,880 --> 00:09:39,720
或者 Linux 类的操作系统

258
00:09:39,720 --> 00:09:43,760
而 LLVM 则是基于苹果操作系统而开源实现的

259
00:09:43,760 --> 00:09:46,520
两个大的操作系统都有自己的编译器

260
00:09:46,520 --> 00:09:48,480
而 Windows 又怎么样呢

261
00:09:48,480 --> 00:09:50,840
操作系统的霸主又去了哪里呢

262
00:09:53,080 --> 00:09:54,680
最后来看一下

263
00:09:54,680 --> 00:09:57,640
跟乔布斯斗了半辈子的 VRAM 又怎么样

264
00:09:58,760 --> 00:10:03,160
VRAM 它的编译器其实隐藏在 Visual Studio 里面

265
00:10:03,160 --> 00:10:06,640
而 Visual Studio 它其实不仅仅是一个 IDE

266
00:10:06,640 --> 00:10:07,880
而是一个

267
00:10:07,880 --> 00:10:10,480
而是属于微软的编程编译套装

268
00:10:10,480 --> 00:10:14,800
里面就包括了 Windows 的编译器 MSVC

269
00:10:14,800 --> 00:10:16,440
Sony 在读书的时期

270
00:10:16,440 --> 00:10:19,760
就没有少折腾过 Visual Studio 2008

271
00:10:19,760 --> 00:10:21,840
这个的导板软件

272
00:10:21,840 --> 00:10:23,400
为啥要折腾导板软件呢

273
00:10:23,400 --> 00:10:27,320
是因为 Visual Studio 它确实收费还是挺狠的

274
00:10:27,320 --> 00:10:29,480
而且它还要授权

275
00:10:29,480 --> 00:10:30,720
真香

276
00:10:31,560 --> 00:10:33,240
卷得不行了

277
00:10:33,240 --> 00:10:35,040
记得一键三连加关注哦

278
00:10:35,080 --> 00:10:38,600
所有的内容都会开源在下面这条链接里面

279
00:10:38,600 --> 00:10:39,880
拜了个掰

